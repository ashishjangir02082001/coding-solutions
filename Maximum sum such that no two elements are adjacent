//Maximum sum such that no two elements are adjacent

//This program works only when we take alternate elements into consideration.

//Given an array of positive numbers, find the maximum sum of a subsequence with the constraint that no 2 numbers in the sequence should be adjacent in the array.
// So 3 2 7 10 should return 13 (sum of 3 and 10) or 3 2 5 10 7 should return 15 (sum of 3, 5 and 7).Answer the question in most efficient way.

//The C++ code goes here ...
//By Ashish Jangir ...

#include <iostream>

using namespace std;

int FindMaxSum(int a[], int n)
{
    int sumi=0, sumj=0;
    for(int i=0,j=1;i<=n-2,j<=n-1;i+=2,j+=2)
    {
        sumi+=a[i];
        sumj+=a[j];
    }
    //cout<<sumi<<" "<<sumj<<endl;
    
    if(sumi>=sumj)
    return sumi; 
    else
    return sumj;
}

int main() 
{ 
  int arr[] = {5, 5, 10, 100, 10, 5}; 
  int n = sizeof(arr) / sizeof(arr[0]); 
  printf("%d ", FindMaxSum(arr, n)); 
  return 0; 
} 
